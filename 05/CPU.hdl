// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    Mux16(a=AluOut ,b=instruction ,sel=inA ,out=Mux16Out );
    Mux16(a=ARegisterOut ,b=inM,sel=AmToALU ,out=OutAM );

    ARegister(in=Mux16Out ,load=LoadA ,out=ARegisterOut,out[0..14]=addressM);


    DRegister(in=AluOut ,load=LoadD ,out=Dout );
    



    ALU(x=Dout ,y=OutAM ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=AluOut,out=outM,zr=zr ,ng=ng );


    PC(in=ARegisterOut ,load=loadPc ,inc=true ,reset=reset ,out[0..14]=pc );


//controls
Not(in=instruction[15],out=inA) ;
And(a=instruction[15],b=instruction[4],out=LoadD) ; //if the instruction is C type and d2 is 1  , so stored in D

And(a=instruction[15],b=instruction[5],out=A1) ;             // instruction is A type and instruction d1 is d1
Or(a=inA,b=A1,out=LoadA);
//loadPc
// JGT , if number is positive and j3 bit is 1
// for checking if number is positive , we check zr must be 0 and ng too must be 0
Or(a=zr , b=ng , out=notJGT);
Not(in=notJGT,out=JGT);
And(a=instruction[0],b=JGT,out=JGT1);

//JEQ 
And(a=instruction[1],b=zr,out =JEQ);

//JLT
And(a=instruction[2],b=ng,out=JLT);

//JGE
Or(a=JGT1,b=JEQ,out=JGE);

//JNE
Or(a=JGT1,b=JLT,out=JNE);

//JLE
Or(a=JEQ,b=JLT,out=JLE);

//JMP 
Or(a=JGT1,b=JLE,out=JMP);


Or(a=JGT1,b=JEQ,out=j1);
Or(a=j1,b=JLT,out=j2);
Or(a=j2,b=JGE,out=j3);
Or(a=j3,b=JNE,out=j4);
Or(a=j4,b=JLE,out=j5);
Or(a=j5,b=JMP,out=j6);

And(a=instruction[15],b=j6,out=loadPc);

//Mux to ALU
//it takes two inputs , intM and Aregister , we need to think when Memory input comes in
// that is when instruction is c and a specified
And(a=instruction[15],b=instruction[12],out=AmToALU);

//LoadM
And(a=instruction[15],b=instruction[3],out=writeM);





}